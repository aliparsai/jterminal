/*
 * This file was automatically generated by EvoSuite
 * Fri Jun 30 15:26:16 GMT 2017
 */

package com.grahamedgecombe.jterminal.vt100;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.grahamedgecombe.jterminal.TerminalCell;
import com.grahamedgecombe.jterminal.bell.BellStrategy;
import com.grahamedgecombe.jterminal.bell.NopBellStrategy;
import com.grahamedgecombe.jterminal.vt100.Vt100TerminalModel;
import java.awt.Color;
import java.awt.color.ICC_Profile;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Vt100TerminalModel_ESTest extends Vt100TerminalModel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vt100TerminalModel vt100TerminalModel0 = new Vt100TerminalModel();
      assertEquals(25, vt100TerminalModel0.getBufferSize());
      assertEquals(25, vt100TerminalModel0.getRows());
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertEquals(0, vt100TerminalModel0.getCursorRow());
      assertEquals(80, vt100TerminalModel0.getColumns());
      assertNotNull(vt100TerminalModel0);
      
      vt100TerminalModel0.setCursorRow(3);
      assertEquals(25, vt100TerminalModel0.getBufferSize());
      assertEquals(25, vt100TerminalModel0.getRows());
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertEquals(3, vt100TerminalModel0.getCursorRow());
      assertEquals(80, vt100TerminalModel0.getColumns());
      
      vt100TerminalModel0.moveCursorDown(3);
      assertEquals(25, vt100TerminalModel0.getBufferSize());
      assertEquals(25, vt100TerminalModel0.getRows());
      assertEquals(6, vt100TerminalModel0.getCursorRow());
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertEquals(80, vt100TerminalModel0.getColumns());
      
      Vt100TerminalModel vt100TerminalModel1 = new Vt100TerminalModel();
      assertEquals(25, vt100TerminalModel1.getRows());
      assertEquals(25, vt100TerminalModel1.getBufferSize());
      assertEquals(0, vt100TerminalModel1.getCursorRow());
      assertEquals(80, vt100TerminalModel1.getColumns());
      assertEquals(0, vt100TerminalModel1.getCursorColumn());
      assertFalse(vt100TerminalModel1.equals((Object)vt100TerminalModel0));
      assertNotNull(vt100TerminalModel1);
      
      BellStrategy bellStrategy0 = vt100TerminalModel1.getBellStrategy();
      assertEquals(25, vt100TerminalModel1.getRows());
      assertEquals(25, vt100TerminalModel1.getBufferSize());
      assertEquals(0, vt100TerminalModel1.getCursorRow());
      assertEquals(80, vt100TerminalModel1.getColumns());
      assertEquals(0, vt100TerminalModel1.getCursorColumn());
      assertNotSame(vt100TerminalModel1, vt100TerminalModel0);
      assertFalse(vt100TerminalModel1.equals((Object)vt100TerminalModel0));
      assertNotNull(bellStrategy0);
      
      vt100TerminalModel0.moveCursorUp(3);
      assertEquals(25, vt100TerminalModel0.getBufferSize());
      assertEquals(25, vt100TerminalModel0.getRows());
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertEquals(3, vt100TerminalModel0.getCursorRow());
      assertEquals(80, vt100TerminalModel0.getColumns());
      assertNotSame(vt100TerminalModel0, vt100TerminalModel1);
      assertFalse(vt100TerminalModel0.equals((Object)vt100TerminalModel1));
      
      vt100TerminalModel1.print("foregroundColor");
      assertEquals(25, vt100TerminalModel1.getRows());
      assertEquals(25, vt100TerminalModel1.getBufferSize());
      assertEquals(0, vt100TerminalModel1.getCursorRow());
      assertEquals(80, vt100TerminalModel1.getColumns());
      assertEquals(15, vt100TerminalModel1.getCursorColumn());
      assertNotSame(vt100TerminalModel1, vt100TerminalModel0);
      assertFalse(vt100TerminalModel1.equals((Object)vt100TerminalModel0));
      
      vt100TerminalModel0.setBellStrategy(bellStrategy0);
      assertEquals(25, vt100TerminalModel0.getBufferSize());
      assertEquals(25, vt100TerminalModel0.getRows());
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertEquals(3, vt100TerminalModel0.getCursorRow());
      assertEquals(80, vt100TerminalModel0.getColumns());
      assertEquals(25, vt100TerminalModel1.getRows());
      assertEquals(25, vt100TerminalModel1.getBufferSize());
      assertEquals(0, vt100TerminalModel1.getCursorRow());
      assertEquals(80, vt100TerminalModel1.getColumns());
      assertEquals(15, vt100TerminalModel1.getCursorColumn());
      assertNotSame(vt100TerminalModel0, vt100TerminalModel1);
      assertNotSame(vt100TerminalModel1, vt100TerminalModel0);
      assertFalse(vt100TerminalModel0.equals((Object)vt100TerminalModel1));
      assertFalse(vt100TerminalModel1.equals((Object)vt100TerminalModel0));
      
      int int0 = vt100TerminalModel0.getBufferSize();
      assertEquals(25, int0);
      assertEquals(25, vt100TerminalModel0.getBufferSize());
      assertEquals(25, vt100TerminalModel0.getRows());
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertEquals(3, vt100TerminalModel0.getCursorRow());
      assertEquals(80, vt100TerminalModel0.getColumns());
      assertNotSame(vt100TerminalModel0, vt100TerminalModel1);
      assertFalse(vt100TerminalModel0.equals((Object)vt100TerminalModel1));
      
      int int1 = vt100TerminalModel0.getBufferSize();
      assertEquals(25, int1);
      assertEquals(25, vt100TerminalModel0.getBufferSize());
      assertEquals(25, vt100TerminalModel0.getRows());
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertEquals(3, vt100TerminalModel0.getCursorRow());
      assertEquals(80, vt100TerminalModel0.getColumns());
      assertNotSame(vt100TerminalModel0, vt100TerminalModel1);
      assertFalse(vt100TerminalModel0.equals((Object)vt100TerminalModel1));
      assertTrue(int1 == int0);
      
      int int2 = vt100TerminalModel0.getCursorRow();
      assertEquals(3, int2);
      assertEquals(25, vt100TerminalModel0.getBufferSize());
      assertEquals(25, vt100TerminalModel0.getRows());
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertEquals(3, vt100TerminalModel0.getCursorRow());
      assertEquals(80, vt100TerminalModel0.getColumns());
      assertNotSame(vt100TerminalModel0, vt100TerminalModel1);
      assertFalse(vt100TerminalModel0.equals((Object)vt100TerminalModel1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      vt100TerminalModel1.setCursorRow(3);
      assertEquals(25, vt100TerminalModel1.getRows());
      assertEquals(25, vt100TerminalModel1.getBufferSize());
      assertEquals(3, vt100TerminalModel1.getCursorRow());
      assertEquals(80, vt100TerminalModel1.getColumns());
      assertEquals(15, vt100TerminalModel1.getCursorColumn());
      assertNotSame(vt100TerminalModel1, vt100TerminalModel0);
      assertFalse(vt100TerminalModel1.equals((Object)vt100TerminalModel0));
      
      int int3 = vt100TerminalModel0.getCursorColumn();
      assertEquals(0, int3);
      assertEquals(25, vt100TerminalModel0.getBufferSize());
      assertEquals(25, vt100TerminalModel0.getRows());
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertEquals(3, vt100TerminalModel0.getCursorRow());
      assertEquals(80, vt100TerminalModel0.getColumns());
      assertNotSame(vt100TerminalModel0, vt100TerminalModel1);
      assertFalse(vt100TerminalModel0.equals((Object)vt100TerminalModel1));
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      TerminalCell terminalCell0 = vt100TerminalModel0.getCell(7, 0);
      assertEquals(25, vt100TerminalModel0.getBufferSize());
      assertEquals(25, vt100TerminalModel0.getRows());
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertEquals(3, vt100TerminalModel0.getCursorRow());
      assertEquals(80, vt100TerminalModel0.getColumns());
      assertNotSame(vt100TerminalModel0, vt100TerminalModel1);
      assertFalse(vt100TerminalModel0.equals((Object)vt100TerminalModel1));
      assertNull(terminalCell0);
      
      vt100TerminalModel1.clear();
      assertEquals(25, vt100TerminalModel1.getRows());
      assertEquals(25, vt100TerminalModel1.getBufferSize());
      assertEquals(3, vt100TerminalModel1.getCursorRow());
      assertEquals(80, vt100TerminalModel1.getColumns());
      assertEquals(15, vt100TerminalModel1.getCursorColumn());
      assertNotSame(vt100TerminalModel1, vt100TerminalModel0);
      assertFalse(vt100TerminalModel1.equals((Object)vt100TerminalModel0));
      
      vt100TerminalModel1.print("");
      assertEquals(25, vt100TerminalModel1.getRows());
      assertEquals(25, vt100TerminalModel1.getBufferSize());
      assertEquals(3, vt100TerminalModel1.getCursorRow());
      assertEquals(80, vt100TerminalModel1.getColumns());
      assertEquals(15, vt100TerminalModel1.getCursorColumn());
      assertNotSame(vt100TerminalModel1, vt100TerminalModel0);
      assertFalse(vt100TerminalModel1.equals((Object)vt100TerminalModel0));
      
      vt100TerminalModel0.setCell(8, 8, (TerminalCell) null);
      assertEquals(25, vt100TerminalModel0.getBufferSize());
      assertEquals(25, vt100TerminalModel0.getRows());
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertEquals(3, vt100TerminalModel0.getCursorRow());
      assertEquals(80, vt100TerminalModel0.getColumns());
      assertNotSame(vt100TerminalModel0, vt100TerminalModel1);
      assertFalse(vt100TerminalModel0.equals((Object)vt100TerminalModel1));
      
      vt100TerminalModel0.print("");
      assertEquals(25, vt100TerminalModel0.getBufferSize());
      assertEquals(25, vt100TerminalModel0.getRows());
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertEquals(3, vt100TerminalModel0.getCursorRow());
      assertEquals(80, vt100TerminalModel0.getColumns());
      assertNotSame(vt100TerminalModel0, vt100TerminalModel1);
      assertFalse(vt100TerminalModel0.equals((Object)vt100TerminalModel1));
      
      Vt100TerminalModel vt100TerminalModel2 = new Vt100TerminalModel();
      assertEquals(0, vt100TerminalModel2.getCursorRow());
      assertEquals(80, vt100TerminalModel2.getColumns());
      assertEquals(0, vt100TerminalModel2.getCursorColumn());
      assertEquals(25, vt100TerminalModel2.getRows());
      assertEquals(25, vt100TerminalModel2.getBufferSize());
      assertFalse(vt100TerminalModel2.equals((Object)vt100TerminalModel1));
      assertFalse(vt100TerminalModel2.equals((Object)vt100TerminalModel0));
      assertNotNull(vt100TerminalModel2);
      
      // Undeclared exception!
      try { 
        vt100TerminalModel2.setCell(25, 25, (TerminalCell) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.grahamedgecombe.jterminal.vt100.Vt100TerminalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vt100TerminalModel vt100TerminalModel0 = new Vt100TerminalModel();
      assertEquals(0, vt100TerminalModel0.getCursorRow());
      assertEquals(25, vt100TerminalModel0.getRows());
      assertEquals(25, vt100TerminalModel0.getBufferSize());
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertEquals(80, vt100TerminalModel0.getColumns());
      assertNotNull(vt100TerminalModel0);
      
      vt100TerminalModel0.moveCursorForward(65);
      assertEquals(0, vt100TerminalModel0.getCursorRow());
      assertEquals(25, vt100TerminalModel0.getRows());
      assertEquals(25, vt100TerminalModel0.getBufferSize());
      assertEquals(65, vt100TerminalModel0.getCursorColumn());
      assertEquals(80, vt100TerminalModel0.getColumns());
      
      // Undeclared exception!
      try { 
        vt100TerminalModel0.getCell(65, (-1006));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.grahamedgecombe.jterminal.vt100.Vt100TerminalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vt100TerminalModel vt100TerminalModel0 = new Vt100TerminalModel();
      assertEquals(25, vt100TerminalModel0.getBufferSize());
      assertEquals(25, vt100TerminalModel0.getRows());
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertEquals(80, vt100TerminalModel0.getColumns());
      assertEquals(0, vt100TerminalModel0.getCursorRow());
      assertNotNull(vt100TerminalModel0);
      
      vt100TerminalModel0.setCursorColumn(9);
      assertEquals(25, vt100TerminalModel0.getBufferSize());
      assertEquals(25, vt100TerminalModel0.getRows());
      assertEquals(9, vt100TerminalModel0.getCursorColumn());
      assertEquals(80, vt100TerminalModel0.getColumns());
      assertEquals(0, vt100TerminalModel0.getCursorRow());
      
      int int0 = vt100TerminalModel0.getColumns();
      assertEquals(80, int0);
      assertEquals(25, vt100TerminalModel0.getBufferSize());
      assertEquals(25, vt100TerminalModel0.getRows());
      assertEquals(9, vt100TerminalModel0.getCursorColumn());
      assertEquals(80, vt100TerminalModel0.getColumns());
      assertEquals(0, vt100TerminalModel0.getCursorRow());
      
      vt100TerminalModel0.setCursorColumn(9);
      assertEquals(25, vt100TerminalModel0.getBufferSize());
      assertEquals(25, vt100TerminalModel0.getRows());
      assertEquals(9, vt100TerminalModel0.getCursorColumn());
      assertEquals(80, vt100TerminalModel0.getColumns());
      assertEquals(0, vt100TerminalModel0.getCursorRow());
      
      int int1 = vt100TerminalModel0.getCursorColumn();
      assertEquals(9, int1);
      assertEquals(25, vt100TerminalModel0.getBufferSize());
      assertEquals(25, vt100TerminalModel0.getRows());
      assertEquals(9, vt100TerminalModel0.getCursorColumn());
      assertEquals(80, vt100TerminalModel0.getColumns());
      assertEquals(0, vt100TerminalModel0.getCursorRow());
      assertFalse(int1 == int0);
      
      Color color0 = vt100TerminalModel0.getDefaultForegroundColor();
      assertEquals(25, vt100TerminalModel0.getBufferSize());
      assertEquals(25, vt100TerminalModel0.getRows());
      assertEquals(9, vt100TerminalModel0.getCursorColumn());
      assertEquals(80, vt100TerminalModel0.getColumns());
      assertEquals(0, vt100TerminalModel0.getCursorRow());
      assertEquals(192, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(192, color0.getBlue());
      assertEquals((-4144960), color0.getRGB());
      assertEquals(192, color0.getRed());
      assertNotNull(color0);
      
      vt100TerminalModel0.moveCursorDown(9);
      assertEquals(25, vt100TerminalModel0.getBufferSize());
      assertEquals(25, vt100TerminalModel0.getRows());
      assertEquals(9, vt100TerminalModel0.getCursorColumn());
      assertEquals(9, vt100TerminalModel0.getCursorRow());
      assertEquals(80, vt100TerminalModel0.getColumns());
      
      BellStrategy bellStrategy0 = vt100TerminalModel0.getBellStrategy();
      assertEquals(25, vt100TerminalModel0.getBufferSize());
      assertEquals(25, vt100TerminalModel0.getRows());
      assertEquals(9, vt100TerminalModel0.getCursorColumn());
      assertEquals(9, vt100TerminalModel0.getCursorRow());
      assertEquals(80, vt100TerminalModel0.getColumns());
      assertNotNull(bellStrategy0);
      
      vt100TerminalModel0.moveCursorForward(80);
      assertEquals(25, vt100TerminalModel0.getBufferSize());
      assertEquals(25, vt100TerminalModel0.getRows());
      assertEquals(79, vt100TerminalModel0.getCursorColumn());
      assertEquals(9, vt100TerminalModel0.getCursorRow());
      assertEquals(80, vt100TerminalModel0.getColumns());
      
      // Undeclared exception!
      try { 
        vt100TerminalModel0.setCursorColumn((-1388));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // column out of range
         //
         verifyException("com.grahamedgecombe.jterminal.vt100.Vt100TerminalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vt100TerminalModel vt100TerminalModel0 = new Vt100TerminalModel(0, 0);
      assertEquals(0, vt100TerminalModel0.getCursorRow());
      assertEquals(0, vt100TerminalModel0.getColumns());
      assertEquals(0, vt100TerminalModel0.getBufferSize());
      assertEquals(0, vt100TerminalModel0.getRows());
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertNotNull(vt100TerminalModel0);
      
      // Undeclared exception!
      try { 
        vt100TerminalModel0.setCursorRow(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row out of range
         //
         verifyException("com.grahamedgecombe.jterminal.vt100.Vt100TerminalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vt100TerminalModel vt100TerminalModel0 = null;
      try {
        vt100TerminalModel0 = new Vt100TerminalModel(243, (-1739), 243);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Zero or positive values only allowed for columns, rows and buffer size.
         //
         verifyException("com.grahamedgecombe.jterminal.vt100.Vt100TerminalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vt100TerminalModel vt100TerminalModel0 = new Vt100TerminalModel();
      assertEquals(80, vt100TerminalModel0.getColumns());
      assertEquals(0, vt100TerminalModel0.getCursorRow());
      assertEquals(25, vt100TerminalModel0.getRows());
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertEquals(25, vt100TerminalModel0.getBufferSize());
      assertNotNull(vt100TerminalModel0);
      
      Color color0 = Color.getColor("7k", (-270));
      assertEquals(242, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals((-270), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getRed());
      assertEquals(254, color0.getGreen());
      assertNotNull(color0);
      
      TerminalCell terminalCell0 = new TerminalCell('o', color0, color0);
      assertEquals(242, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals((-270), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getRed());
      assertEquals(254, color0.getGreen());
      assertEquals('o', terminalCell0.getCharacter());
      assertNotNull(terminalCell0);
      
      // Undeclared exception!
      try { 
        vt100TerminalModel0.setCell(9, 706, terminalCell0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.grahamedgecombe.jterminal.vt100.Vt100TerminalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vt100TerminalModel vt100TerminalModel0 = new Vt100TerminalModel(703, 703);
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertEquals(703, vt100TerminalModel0.getRows());
      assertEquals(703, vt100TerminalModel0.getBufferSize());
      assertEquals(703, vt100TerminalModel0.getColumns());
      assertEquals(0, vt100TerminalModel0.getCursorRow());
      assertNotNull(vt100TerminalModel0);
      
      // Undeclared exception!
      try { 
        vt100TerminalModel0.setCursorColumn(703);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // column out of range
         //
         verifyException("com.grahamedgecombe.jterminal.vt100.Vt100TerminalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vt100TerminalModel vt100TerminalModel0 = new Vt100TerminalModel();
      assertEquals(0, vt100TerminalModel0.getCursorRow());
      assertEquals(25, vt100TerminalModel0.getBufferSize());
      assertEquals(25, vt100TerminalModel0.getRows());
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertEquals(80, vt100TerminalModel0.getColumns());
      assertNotNull(vt100TerminalModel0);
      
      BellStrategy bellStrategy0 = vt100TerminalModel0.getBellStrategy();
      assertEquals(0, vt100TerminalModel0.getCursorRow());
      assertEquals(25, vt100TerminalModel0.getBufferSize());
      assertEquals(25, vt100TerminalModel0.getRows());
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertEquals(80, vt100TerminalModel0.getColumns());
      assertNotNull(bellStrategy0);
      
      // Undeclared exception!
      try { 
        vt100TerminalModel0.setCell(238, 793, (TerminalCell) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.grahamedgecombe.jterminal.vt100.Vt100TerminalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vt100TerminalModel vt100TerminalModel0 = new Vt100TerminalModel(209, 209);
      assertEquals(209, vt100TerminalModel0.getColumns());
      assertEquals(209, vt100TerminalModel0.getRows());
      assertEquals(0, vt100TerminalModel0.getCursorRow());
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertEquals(209, vt100TerminalModel0.getBufferSize());
      assertNotNull(vt100TerminalModel0);
      
      // Undeclared exception!
      try { 
        vt100TerminalModel0.setCell((-2125), (-2125), (TerminalCell) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.grahamedgecombe.jterminal.vt100.Vt100TerminalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vt100TerminalModel vt100TerminalModel0 = new Vt100TerminalModel(7, 7);
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertEquals(0, vt100TerminalModel0.getCursorRow());
      assertEquals(7, vt100TerminalModel0.getBufferSize());
      assertEquals(7, vt100TerminalModel0.getRows());
      assertEquals(7, vt100TerminalModel0.getColumns());
      assertNotNull(vt100TerminalModel0);
      
      int int0 = vt100TerminalModel0.getBufferSize();
      assertEquals(7, int0);
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertEquals(0, vt100TerminalModel0.getCursorRow());
      assertEquals(7, vt100TerminalModel0.getBufferSize());
      assertEquals(7, vt100TerminalModel0.getRows());
      assertEquals(7, vt100TerminalModel0.getColumns());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vt100TerminalModel vt100TerminalModel0 = new Vt100TerminalModel(65, 65);
      assertEquals(65, vt100TerminalModel0.getBufferSize());
      assertEquals(0, vt100TerminalModel0.getCursorRow());
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertEquals(65, vt100TerminalModel0.getColumns());
      assertEquals(65, vt100TerminalModel0.getRows());
      assertNotNull(vt100TerminalModel0);
      
      // Undeclared exception!
      try { 
        vt100TerminalModel0.getCell(65, 65);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.grahamedgecombe.jterminal.vt100.Vt100TerminalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vt100TerminalModel vt100TerminalModel0 = null;
      try {
        vt100TerminalModel0 = new Vt100TerminalModel(9, 0, (-1761));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Zero or positive values only allowed for columns, rows and buffer size.
         //
         verifyException("com.grahamedgecombe.jterminal.vt100.Vt100TerminalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vt100TerminalModel vt100TerminalModel0 = new Vt100TerminalModel(0, 0);
      assertEquals(0, vt100TerminalModel0.getRows());
      assertEquals(0, vt100TerminalModel0.getBufferSize());
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertEquals(0, vt100TerminalModel0.getColumns());
      assertEquals(0, vt100TerminalModel0.getCursorRow());
      assertNotNull(vt100TerminalModel0);
      
      int int0 = vt100TerminalModel0.getBufferSize();
      assertEquals(0, int0);
      assertEquals(0, vt100TerminalModel0.getRows());
      assertEquals(0, vt100TerminalModel0.getBufferSize());
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertEquals(0, vt100TerminalModel0.getColumns());
      assertEquals(0, vt100TerminalModel0.getCursorRow());
      
      BellStrategy bellStrategy0 = vt100TerminalModel0.getBellStrategy();
      assertEquals(0, vt100TerminalModel0.getRows());
      assertEquals(0, vt100TerminalModel0.getBufferSize());
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertEquals(0, vt100TerminalModel0.getColumns());
      assertEquals(0, vt100TerminalModel0.getCursorRow());
      assertNotNull(bellStrategy0);
      
      // Undeclared exception!
      try { 
        vt100TerminalModel0.getCell((-265), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.grahamedgecombe.jterminal.vt100.Vt100TerminalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vt100TerminalModel vt100TerminalModel0 = new Vt100TerminalModel();
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertEquals(0, vt100TerminalModel0.getCursorRow());
      assertEquals(80, vt100TerminalModel0.getColumns());
      assertEquals(25, vt100TerminalModel0.getBufferSize());
      assertEquals(25, vt100TerminalModel0.getRows());
      assertNotNull(vt100TerminalModel0);
      
      vt100TerminalModel0.print("backgroundColor");
      assertEquals(0, vt100TerminalModel0.getCursorRow());
      assertEquals(80, vt100TerminalModel0.getColumns());
      assertEquals(25, vt100TerminalModel0.getBufferSize());
      assertEquals(25, vt100TerminalModel0.getRows());
      assertEquals(15, vt100TerminalModel0.getCursorColumn());
      
      vt100TerminalModel0.moveCursorBack(2620);
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertEquals(0, vt100TerminalModel0.getCursorRow());
      assertEquals(80, vt100TerminalModel0.getColumns());
      assertEquals(25, vt100TerminalModel0.getBufferSize());
      assertEquals(25, vt100TerminalModel0.getRows());
      
      vt100TerminalModel0.moveCursorForward(0);
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertEquals(0, vt100TerminalModel0.getCursorRow());
      assertEquals(80, vt100TerminalModel0.getColumns());
      assertEquals(25, vt100TerminalModel0.getBufferSize());
      assertEquals(25, vt100TerminalModel0.getRows());
      
      TerminalCell terminalCell0 = vt100TerminalModel0.getCell(0, 0);
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertEquals(0, vt100TerminalModel0.getCursorRow());
      assertEquals(80, vt100TerminalModel0.getColumns());
      assertEquals(25, vt100TerminalModel0.getBufferSize());
      assertEquals(25, vt100TerminalModel0.getRows());
      assertEquals('b', terminalCell0.getCharacter());
      assertNotNull(terminalCell0);
      
      vt100TerminalModel0.setCell(0, 0, terminalCell0);
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertEquals(0, vt100TerminalModel0.getCursorRow());
      assertEquals(80, vt100TerminalModel0.getColumns());
      assertEquals(25, vt100TerminalModel0.getBufferSize());
      assertEquals(25, vt100TerminalModel0.getRows());
      assertEquals('b', terminalCell0.getCharacter());
      
      int int0 = vt100TerminalModel0.getRows();
      assertEquals(25, int0);
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertEquals(0, vt100TerminalModel0.getCursorRow());
      assertEquals(80, vt100TerminalModel0.getColumns());
      assertEquals(25, vt100TerminalModel0.getBufferSize());
      assertEquals(25, vt100TerminalModel0.getRows());
      
      int int1 = vt100TerminalModel0.getRows();
      assertEquals(25, int1);
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertEquals(0, vt100TerminalModel0.getCursorRow());
      assertEquals(80, vt100TerminalModel0.getColumns());
      assertEquals(25, vt100TerminalModel0.getBufferSize());
      assertEquals(25, vt100TerminalModel0.getRows());
      assertTrue(int1 == int0);
      
      vt100TerminalModel0.print("MZ#4Tm=~&PF#GQ");
      assertEquals(0, vt100TerminalModel0.getCursorRow());
      assertEquals(80, vt100TerminalModel0.getColumns());
      assertEquals(25, vt100TerminalModel0.getBufferSize());
      assertEquals(14, vt100TerminalModel0.getCursorColumn());
      assertEquals(25, vt100TerminalModel0.getRows());
      
      // Undeclared exception!
      try { 
        vt100TerminalModel0.setCursorRow(2257);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row out of range
         //
         verifyException("com.grahamedgecombe.jterminal.vt100.Vt100TerminalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vt100TerminalModel vt100TerminalModel0 = new Vt100TerminalModel(0, 1026);
      assertEquals(1026, vt100TerminalModel0.getRows());
      assertEquals(0, vt100TerminalModel0.getColumns());
      assertEquals(0, vt100TerminalModel0.getCursorRow());
      assertEquals(1026, vt100TerminalModel0.getBufferSize());
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertNotNull(vt100TerminalModel0);
      
      Color color0 = vt100TerminalModel0.getDefaultBackgroundColor();
      assertEquals(1026, vt100TerminalModel0.getRows());
      assertEquals(0, vt100TerminalModel0.getColumns());
      assertEquals(0, vt100TerminalModel0.getCursorRow());
      assertEquals(1026, vt100TerminalModel0.getBufferSize());
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertNotNull(color0);
      
      vt100TerminalModel0.setCursorRow(0);
      assertEquals(1026, vt100TerminalModel0.getRows());
      assertEquals(0, vt100TerminalModel0.getColumns());
      assertEquals(0, vt100TerminalModel0.getCursorRow());
      assertEquals(1026, vt100TerminalModel0.getBufferSize());
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      
      vt100TerminalModel0.moveCursorDown(1026);
      assertEquals(1026, vt100TerminalModel0.getRows());
      assertEquals(1025, vt100TerminalModel0.getCursorRow());
      assertEquals(0, vt100TerminalModel0.getColumns());
      assertEquals(1026, vt100TerminalModel0.getBufferSize());
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      
      int int0 = vt100TerminalModel0.getColumns();
      assertEquals(0, int0);
      assertEquals(1026, vt100TerminalModel0.getRows());
      assertEquals(1025, vt100TerminalModel0.getCursorRow());
      assertEquals(0, vt100TerminalModel0.getColumns());
      assertEquals(1026, vt100TerminalModel0.getBufferSize());
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      
      Color color1 = vt100TerminalModel0.getDefaultBackgroundColor();
      assertEquals(1026, vt100TerminalModel0.getRows());
      assertEquals(1025, vt100TerminalModel0.getCursorRow());
      assertEquals(0, vt100TerminalModel0.getColumns());
      assertEquals(1026, vt100TerminalModel0.getBufferSize());
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertEquals(0, color1.getRed());
      assertEquals(0, color1.getBlue());
      assertEquals(0, color1.getGreen());
      assertEquals(255, color1.getAlpha());
      assertEquals(1, color1.getTransparency());
      assertEquals((-16777216), color1.getRGB());
      assertSame(color1, color0);
      assertNotNull(color1);
      
      int int1 = vt100TerminalModel0.getRows();
      assertEquals(1026, int1);
      assertEquals(1026, vt100TerminalModel0.getRows());
      assertEquals(1025, vt100TerminalModel0.getCursorRow());
      assertEquals(0, vt100TerminalModel0.getColumns());
      assertEquals(1026, vt100TerminalModel0.getBufferSize());
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertFalse(int1 == int0);
      
      int int2 = vt100TerminalModel0.getRows();
      assertEquals(1026, int2);
      assertEquals(1026, vt100TerminalModel0.getRows());
      assertEquals(1025, vt100TerminalModel0.getCursorRow());
      assertEquals(0, vt100TerminalModel0.getColumns());
      assertEquals(1026, vt100TerminalModel0.getBufferSize());
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Vt100TerminalModel vt100TerminalModel0 = new Vt100TerminalModel();
          assertEquals(25, vt100TerminalModel0.getBufferSize());
          assertEquals(25, vt100TerminalModel0.getRows());
          assertEquals(0, vt100TerminalModel0.getCursorColumn());
          assertEquals(80, vt100TerminalModel0.getColumns());
          assertEquals(0, vt100TerminalModel0.getCursorRow());
          assertNotNull(vt100TerminalModel0);
          
          vt100TerminalModel0.clear();
          assertEquals(25, vt100TerminalModel0.getBufferSize());
          assertEquals(25, vt100TerminalModel0.getRows());
          assertEquals(0, vt100TerminalModel0.getCursorColumn());
          assertEquals(80, vt100TerminalModel0.getColumns());
          assertEquals(0, vt100TerminalModel0.getCursorRow());
          
          int int0 = vt100TerminalModel0.getRows();
          assertEquals(25, int0);
          assertEquals(25, vt100TerminalModel0.getBufferSize());
          assertEquals(25, vt100TerminalModel0.getRows());
          assertEquals(0, vt100TerminalModel0.getCursorColumn());
          assertEquals(80, vt100TerminalModel0.getColumns());
          assertEquals(0, vt100TerminalModel0.getCursorRow());
          
          NopBellStrategy nopBellStrategy0 = new NopBellStrategy();
          assertNotNull(nopBellStrategy0);
          
          vt100TerminalModel0.setBellStrategy(nopBellStrategy0);
          assertEquals(25, vt100TerminalModel0.getBufferSize());
          assertEquals(25, vt100TerminalModel0.getRows());
          assertEquals(0, vt100TerminalModel0.getCursorColumn());
          assertEquals(80, vt100TerminalModel0.getColumns());
          assertEquals(0, vt100TerminalModel0.getCursorRow());
          
          // Undeclared exception!
          try { 
            vt100TerminalModel0.getCell(25, 25);
            fail("Expecting exception: IndexOutOfBoundsException");
          
          } catch(IndexOutOfBoundsException e) {
             //
             // no message in exception (getMessage() returned null)
             //
             verifyException("com.grahamedgecombe.jterminal.vt100.Vt100TerminalModel", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vt100TerminalModel vt100TerminalModel0 = new Vt100TerminalModel(602, 602);
      assertEquals(602, vt100TerminalModel0.getBufferSize());
      assertEquals(602, vt100TerminalModel0.getRows());
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertEquals(0, vt100TerminalModel0.getCursorRow());
      assertEquals(602, vt100TerminalModel0.getColumns());
      assertNotNull(vt100TerminalModel0);
      
      // Undeclared exception!
      try { 
        vt100TerminalModel0.setBellStrategy((BellStrategy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // strategy
         //
         verifyException("com.grahamedgecombe.jterminal.vt100.Vt100TerminalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 1560;
      int int1 = (-1313);
      Vt100TerminalModel vt100TerminalModel0 = null;
      try {
        vt100TerminalModel0 = new Vt100TerminalModel(1560, (-1313));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Zero or positive values only allowed for columns, rows and buffer size.
         //
         verifyException("com.grahamedgecombe.jterminal.vt100.Vt100TerminalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vt100TerminalModel vt100TerminalModel0 = new Vt100TerminalModel();
      assertEquals(80, vt100TerminalModel0.getColumns());
      assertEquals(25, vt100TerminalModel0.getBufferSize());
      assertEquals(25, vt100TerminalModel0.getRows());
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertEquals(0, vt100TerminalModel0.getCursorRow());
      assertNotNull(vt100TerminalModel0);
      
      vt100TerminalModel0.clear();
      assertEquals(80, vt100TerminalModel0.getColumns());
      assertEquals(25, vt100TerminalModel0.getBufferSize());
      assertEquals(25, vt100TerminalModel0.getRows());
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertEquals(0, vt100TerminalModel0.getCursorRow());
      
      // Undeclared exception!
      try { 
        vt100TerminalModel0.print((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // str
         //
         verifyException("com.grahamedgecombe.jterminal.vt100.Vt100TerminalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vt100TerminalModel vt100TerminalModel0 = new Vt100TerminalModel();
      assertEquals(0, vt100TerminalModel0.getCursorRow());
      assertEquals(25, vt100TerminalModel0.getRows());
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertEquals(80, vt100TerminalModel0.getColumns());
      assertEquals(25, vt100TerminalModel0.getBufferSize());
      assertNotNull(vt100TerminalModel0);
      
      int int0 = vt100TerminalModel0.getRows();
      assertEquals(25, int0);
      assertEquals(0, vt100TerminalModel0.getCursorRow());
      assertEquals(25, vt100TerminalModel0.getRows());
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertEquals(80, vt100TerminalModel0.getColumns());
      assertEquals(25, vt100TerminalModel0.getBufferSize());
      
      vt100TerminalModel0.clear();
      assertEquals(0, vt100TerminalModel0.getCursorRow());
      assertEquals(25, vt100TerminalModel0.getRows());
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertEquals(80, vt100TerminalModel0.getColumns());
      assertEquals(25, vt100TerminalModel0.getBufferSize());
      
      Color color0 = Color.black;
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertNotNull(color0);
      
      TerminalCell terminalCell0 = new TerminalCell('v', color0, color0);
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals('v', terminalCell0.getCharacter());
      assertNotNull(terminalCell0);
      
      // Undeclared exception!
      try { 
        vt100TerminalModel0.setCell(21, (-791), terminalCell0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.grahamedgecombe.jterminal.vt100.Vt100TerminalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vt100TerminalModel vt100TerminalModel0 = new Vt100TerminalModel();
      assertEquals(25, vt100TerminalModel0.getRows());
      assertEquals(25, vt100TerminalModel0.getBufferSize());
      assertEquals(0, vt100TerminalModel0.getCursorRow());
      assertEquals(80, vt100TerminalModel0.getColumns());
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertNotNull(vt100TerminalModel0);
      
      vt100TerminalModel0.print("4ZNv\"|bvXi~[*qzm");
      assertEquals(25, vt100TerminalModel0.getRows());
      assertEquals(25, vt100TerminalModel0.getBufferSize());
      assertEquals(0, vt100TerminalModel0.getCursorRow());
      assertEquals(80, vt100TerminalModel0.getColumns());
      assertEquals(16, vt100TerminalModel0.getCursorColumn());
      
      // Undeclared exception!
      try { 
        vt100TerminalModel0.setCursorRow(851);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row out of range
         //
         verifyException("com.grahamedgecombe.jterminal.vt100.Vt100TerminalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vt100TerminalModel vt100TerminalModel0 = new Vt100TerminalModel(114, 114, 114);
      assertEquals(114, vt100TerminalModel0.getColumns());
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertEquals(114, vt100TerminalModel0.getRows());
      assertEquals(0, vt100TerminalModel0.getCursorRow());
      assertEquals(114, vt100TerminalModel0.getBufferSize());
      assertNotNull(vt100TerminalModel0);
      
      Vt100TerminalModel vt100TerminalModel1 = new Vt100TerminalModel();
      assertEquals(0, vt100TerminalModel1.getCursorRow());
      assertEquals(0, vt100TerminalModel1.getCursorColumn());
      assertEquals(80, vt100TerminalModel1.getColumns());
      assertEquals(25, vt100TerminalModel1.getBufferSize());
      assertEquals(25, vt100TerminalModel1.getRows());
      assertFalse(vt100TerminalModel1.equals((Object)vt100TerminalModel0));
      assertNotNull(vt100TerminalModel1);
      
      vt100TerminalModel1.moveCursorUp(114);
      assertEquals(0, vt100TerminalModel1.getCursorRow());
      assertEquals(0, vt100TerminalModel1.getCursorColumn());
      assertEquals(80, vt100TerminalModel1.getColumns());
      assertEquals(25, vt100TerminalModel1.getBufferSize());
      assertEquals(25, vt100TerminalModel1.getRows());
      assertNotSame(vt100TerminalModel1, vt100TerminalModel0);
      assertFalse(vt100TerminalModel1.equals((Object)vt100TerminalModel0));
      
      TerminalCell terminalCell0 = vt100TerminalModel1.getCell(69, 12);
      assertEquals(0, vt100TerminalModel1.getCursorRow());
      assertEquals(0, vt100TerminalModel1.getCursorColumn());
      assertEquals(80, vt100TerminalModel1.getColumns());
      assertEquals(25, vt100TerminalModel1.getBufferSize());
      assertEquals(25, vt100TerminalModel1.getRows());
      assertNotSame(vt100TerminalModel1, vt100TerminalModel0);
      assertFalse(vt100TerminalModel1.equals((Object)vt100TerminalModel0));
      assertNull(terminalCell0);
      
      NopBellStrategy nopBellStrategy0 = new NopBellStrategy();
      assertNotNull(nopBellStrategy0);
      
      vt100TerminalModel1.setBellStrategy(nopBellStrategy0);
      assertEquals(0, vt100TerminalModel1.getCursorRow());
      assertEquals(0, vt100TerminalModel1.getCursorColumn());
      assertEquals(80, vt100TerminalModel1.getColumns());
      assertEquals(25, vt100TerminalModel1.getBufferSize());
      assertEquals(25, vt100TerminalModel1.getRows());
      assertNotSame(vt100TerminalModel1, vt100TerminalModel0);
      assertFalse(vt100TerminalModel1.equals((Object)vt100TerminalModel0));
      
      vt100TerminalModel1.moveCursorForward(2);
      assertEquals(0, vt100TerminalModel1.getCursorRow());
      assertEquals(80, vt100TerminalModel1.getColumns());
      assertEquals(25, vt100TerminalModel1.getBufferSize());
      assertEquals(2, vt100TerminalModel1.getCursorColumn());
      assertEquals(25, vt100TerminalModel1.getRows());
      assertNotSame(vt100TerminalModel1, vt100TerminalModel0);
      assertFalse(vt100TerminalModel1.equals((Object)vt100TerminalModel0));
      
      // Undeclared exception!
      try { 
        vt100TerminalModel0.setCell(114, 69, (TerminalCell) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.grahamedgecombe.jterminal.vt100.Vt100TerminalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vt100TerminalModel vt100TerminalModel0 = new Vt100TerminalModel(2983, 430, 430);
      assertEquals(430, vt100TerminalModel0.getRows());
      assertEquals(2983, vt100TerminalModel0.getColumns());
      assertEquals(430, vt100TerminalModel0.getBufferSize());
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertEquals(0, vt100TerminalModel0.getCursorRow());
      assertNotNull(vt100TerminalModel0);
      
      vt100TerminalModel0.print("]_Bv3'Tc5iP(");
      assertEquals(430, vt100TerminalModel0.getRows());
      assertEquals(2983, vt100TerminalModel0.getColumns());
      assertEquals(430, vt100TerminalModel0.getBufferSize());
      assertEquals(12, vt100TerminalModel0.getCursorColumn());
      assertEquals(0, vt100TerminalModel0.getCursorRow());
      
      int int0 = ICC_Profile.icHdrColorSpace;
      assertEquals(16, int0);
      
      int int1 = vt100TerminalModel0.getCursorRow();
      assertEquals(0, int1);
      assertEquals(430, vt100TerminalModel0.getRows());
      assertEquals(2983, vt100TerminalModel0.getColumns());
      assertEquals(430, vt100TerminalModel0.getBufferSize());
      assertEquals(12, vt100TerminalModel0.getCursorColumn());
      assertEquals(0, vt100TerminalModel0.getCursorRow());
      assertFalse(int1 == int0);
      
      int int2 = 69;
      // Undeclared exception!
      try { 
        vt100TerminalModel0.getCell(69, 2983);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.grahamedgecombe.jterminal.vt100.Vt100TerminalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vt100TerminalModel vt100TerminalModel0 = new Vt100TerminalModel();
      assertEquals(80, vt100TerminalModel0.getColumns());
      assertEquals(25, vt100TerminalModel0.getRows());
      assertEquals(0, vt100TerminalModel0.getCursorRow());
      assertEquals(25, vt100TerminalModel0.getBufferSize());
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertNotNull(vt100TerminalModel0);
      
      vt100TerminalModel0.moveCursorForward(255);
      assertEquals(80, vt100TerminalModel0.getColumns());
      assertEquals(25, vt100TerminalModel0.getRows());
      assertEquals(0, vt100TerminalModel0.getCursorRow());
      assertEquals(79, vt100TerminalModel0.getCursorColumn());
      assertEquals(25, vt100TerminalModel0.getBufferSize());
      
      vt100TerminalModel0.moveCursorDown(255);
      assertEquals(80, vt100TerminalModel0.getColumns());
      assertEquals(25, vt100TerminalModel0.getRows());
      assertEquals(79, vt100TerminalModel0.getCursorColumn());
      assertEquals(25, vt100TerminalModel0.getBufferSize());
      assertEquals(24, vt100TerminalModel0.getCursorRow());
      
      vt100TerminalModel0.print("#LO<2~=a>|L");
      assertEquals(10, vt100TerminalModel0.getCursorColumn());
      assertEquals(80, vt100TerminalModel0.getColumns());
      assertEquals(25, vt100TerminalModel0.getRows());
      assertEquals(25, vt100TerminalModel0.getBufferSize());
      assertEquals(24, vt100TerminalModel0.getCursorRow());
      
      vt100TerminalModel0.moveCursorDown(5);
      assertEquals(10, vt100TerminalModel0.getCursorColumn());
      assertEquals(80, vt100TerminalModel0.getColumns());
      assertEquals(25, vt100TerminalModel0.getRows());
      assertEquals(25, vt100TerminalModel0.getBufferSize());
      assertEquals(24, vt100TerminalModel0.getCursorRow());
      
      // Undeclared exception!
      try { 
        vt100TerminalModel0.getCell(255, 7);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.grahamedgecombe.jterminal.vt100.Vt100TerminalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 70;
      Vt100TerminalModel vt100TerminalModel0 = new Vt100TerminalModel(70, 70);
      assertEquals(70, vt100TerminalModel0.getRows());
      assertEquals(70, vt100TerminalModel0.getBufferSize());
      assertEquals(70, vt100TerminalModel0.getColumns());
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertEquals(0, vt100TerminalModel0.getCursorRow());
      assertNotNull(vt100TerminalModel0);
      
      // Undeclared exception!
      try { 
        vt100TerminalModel0.setCursorRow((-2524));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row out of range
         //
         verifyException("com.grahamedgecombe.jterminal.vt100.Vt100TerminalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Vt100TerminalModel vt100TerminalModel0 = new Vt100TerminalModel();
          assertEquals(0, vt100TerminalModel0.getCursorRow());
          assertEquals(25, vt100TerminalModel0.getBufferSize());
          assertEquals(80, vt100TerminalModel0.getColumns());
          assertEquals(0, vt100TerminalModel0.getCursorColumn());
          assertEquals(25, vt100TerminalModel0.getRows());
          assertNotNull(vt100TerminalModel0);
          
          vt100TerminalModel0.print("13?Fiowl08LnKP~");
          assertEquals(0, vt100TerminalModel0.getCursorRow());
          assertEquals(25, vt100TerminalModel0.getBufferSize());
          assertEquals(80, vt100TerminalModel0.getColumns());
          assertEquals(25, vt100TerminalModel0.getRows());
          assertEquals(13, vt100TerminalModel0.getCursorColumn());
          
          vt100TerminalModel0.moveCursorUp(1225);
          assertEquals(0, vt100TerminalModel0.getCursorRow());
          assertEquals(25, vt100TerminalModel0.getBufferSize());
          assertEquals(80, vt100TerminalModel0.getColumns());
          assertEquals(25, vt100TerminalModel0.getRows());
          assertEquals(13, vt100TerminalModel0.getCursorColumn());
          
          vt100TerminalModel0.clear();
          assertEquals(0, vt100TerminalModel0.getCursorRow());
          assertEquals(25, vt100TerminalModel0.getBufferSize());
          assertEquals(80, vt100TerminalModel0.getColumns());
          assertEquals(25, vt100TerminalModel0.getRows());
          assertEquals(13, vt100TerminalModel0.getCursorColumn());
          
          // Undeclared exception!
          try { 
            vt100TerminalModel0.setCursorColumn(1225);
            fail("Expecting exception: IllegalArgumentException");
          
          } catch(IllegalArgumentException e) {
             //
             // column out of range
             //
             verifyException("com.grahamedgecombe.jterminal.vt100.Vt100TerminalModel", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NopBellStrategy nopBellStrategy0 = new NopBellStrategy();
      assertNotNull(nopBellStrategy0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vt100TerminalModel vt100TerminalModel0 = null;
      try {
        vt100TerminalModel0 = new Vt100TerminalModel((-294), (-294), (-11));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Zero or positive values only allowed for columns, rows and buffer size.
         //
         verifyException("com.grahamedgecombe.jterminal.vt100.Vt100TerminalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vt100TerminalModel vt100TerminalModel0 = new Vt100TerminalModel();
      assertEquals(25, vt100TerminalModel0.getBufferSize());
      assertEquals(25, vt100TerminalModel0.getRows());
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertEquals(0, vt100TerminalModel0.getCursorRow());
      assertEquals(80, vt100TerminalModel0.getColumns());
      assertNotNull(vt100TerminalModel0);
      
      NopBellStrategy nopBellStrategy0 = new NopBellStrategy();
      assertNotNull(nopBellStrategy0);
      
      vt100TerminalModel0.setBellStrategy(nopBellStrategy0);
      assertEquals(25, vt100TerminalModel0.getBufferSize());
      assertEquals(25, vt100TerminalModel0.getRows());
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertEquals(0, vt100TerminalModel0.getCursorRow());
      assertEquals(80, vt100TerminalModel0.getColumns());
      
      Color color0 = vt100TerminalModel0.getDefaultForegroundColor();
      assertEquals(25, vt100TerminalModel0.getBufferSize());
      assertEquals(25, vt100TerminalModel0.getRows());
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertEquals(0, vt100TerminalModel0.getCursorRow());
      assertEquals(80, vt100TerminalModel0.getColumns());
      assertEquals(192, color0.getRed());
      assertEquals(192, color0.getBlue());
      assertEquals((-4144960), color0.getRGB());
      assertEquals(192, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertNotNull(color0);
      
      vt100TerminalModel0.moveCursorBack(10);
      assertEquals(25, vt100TerminalModel0.getBufferSize());
      assertEquals(25, vt100TerminalModel0.getRows());
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertEquals(0, vt100TerminalModel0.getCursorRow());
      assertEquals(80, vt100TerminalModel0.getColumns());
      
      TerminalCell terminalCell0 = new TerminalCell('5', color0, color0);
      assertEquals(25, vt100TerminalModel0.getBufferSize());
      assertEquals(25, vt100TerminalModel0.getRows());
      assertEquals(0, vt100TerminalModel0.getCursorColumn());
      assertEquals(0, vt100TerminalModel0.getCursorRow());
      assertEquals(80, vt100TerminalModel0.getColumns());
      assertEquals(192, color0.getRed());
      assertEquals(192, color0.getBlue());
      assertEquals((-4144960), color0.getRGB());
      assertEquals(192, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals('5', terminalCell0.getCharacter());
      assertNotNull(terminalCell0);
      
      // Undeclared exception!
      try { 
        vt100TerminalModel0.setCell(10, 25, terminalCell0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.grahamedgecombe.jterminal.vt100.Vt100TerminalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vt100TerminalModel vt100TerminalModel0 = new Vt100TerminalModel();
      Vt100TerminalModel vt100TerminalModel1 = new Vt100TerminalModel(127, 127);
      vt100TerminalModel1.getCell(0, 0);
      vt100TerminalModel0.setCell(0, 0, (TerminalCell) null);
      vt100TerminalModel0.setCursorColumn(27);
      vt100TerminalModel0.clear();
      vt100TerminalModel0.getDefaultForegroundColor();
      vt100TerminalModel0.getBellStrategy();
      vt100TerminalModel0.getDefaultBackgroundColor();
      vt100TerminalModel1.getDefaultBackgroundColor();
      // Undeclared exception!
      try { 
        vt100TerminalModel0.getCell((-354), 127);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.grahamedgecombe.jterminal.vt100.Vt100TerminalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 0;
      int int1 = 2875;
      int int2 = 3;
      Vt100TerminalModel vt100TerminalModel0 = null;
      try {
        vt100TerminalModel0 = new Vt100TerminalModel(0, 2875, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The buffer is too small
         //
         verifyException("com.grahamedgecombe.jterminal.vt100.Vt100TerminalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vt100TerminalModel vt100TerminalModel0 = new Vt100TerminalModel();
      vt100TerminalModel0.getColumns();
      vt100TerminalModel0.getCursorColumn();
      vt100TerminalModel0.getDefaultForegroundColor();
      vt100TerminalModel0.getBellStrategy();
      int int0 = (-1388);
      // Undeclared exception!
      try { 
        vt100TerminalModel0.setCursorColumn((-1388));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // column out of range
         //
         verifyException("com.grahamedgecombe.jterminal.vt100.Vt100TerminalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 8;
      Vt100TerminalModel vt100TerminalModel0 = new Vt100TerminalModel(8, 0);
      vt100TerminalModel0.moveCursorForward(66);
      vt100TerminalModel0.moveCursorBack(8);
      NopBellStrategy nopBellStrategy0 = new NopBellStrategy();
      vt100TerminalModel0.setBellStrategy(nopBellStrategy0);
      vt100TerminalModel0.clear();
      vt100TerminalModel0.getRows();
      vt100TerminalModel0.getRows();
      // Undeclared exception!
      try { 
        vt100TerminalModel0.print("wF");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.grahamedgecombe.jterminal.vt100.Vt100TerminalModel$Vt100Listener", e);
      }
  }
}
